<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Recipe Collection</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://unpkg.com/bootstrap-table@1.22.1/dist/bootstrap-table.min.css">
    <style>
        .img-container {
            width: 150px;
            height: 100px;
            overflow: hidden;
        }

        .img-container img {
            width: auto;
            height: auto;
            max-width: 150px;
            max-height: 100px;
        }
    </style>
</head>
<body>

<div class="container">
    <h1>Recipe Collection</h1>

    <div class="mb-3">
        <h2>Ingredients</h2>
        <table class="table">
            <thead>
            <tr>
                <th>Ingredient</th>
                <th>Use</th>
                <th>Available</th>
            </tr>
            </thead>
            <tbody id="ingredientTableBody"></tbody>
        </table>
    </div>

    <button id="searchButton" class="btn btn-primary mb-3">Search Recipes</button>

    <h2>Recipes</h2>
    <table id="recipeTable" data-toggle="table" data-pagination="true" data-page-size="100"
           data-sortable="true" data-multiple-sort="true">
        <thead>
        <tr>
            <th data-field="recipeName" data-sortable="true">Recipe</th>
            <th data-field="matchUseCount" data-sortable="true">Use Match</th>
            <th data-field="matchCount" data-sortable="true">Kitchen Match</th>
            <th data-field="missingCount" data-sortable="true">Missing</th>
            <th data-field="ingredients">Ingredients</th>
        </tr>
        </thead>
    </table>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
<script src="https://unpkg.com/bootstrap-table@1.22.1/dist/bootstrap-table.min.js"></script>
<script src="https://unpkg.com/bootstrap-table@1.22.1/dist/extensions/multiple-sort/bootstrap-table-multiple-sort.js"></script>


<script>
    const recipeBaseUrl = "https://richardeigenmann.github.io/Rezeptsammlung/";
    const jsonUrl = recipeBaseUrl + "recipesArray.json";
    const ingredientUseStorageKey = "ingredientUse";
    const ingredientAvailableStorageKey = "ingredientAvailable";

    function htmlDecode(input) {
        const doc = new DOMParser().parseFromString(input, "text/html");
        return doc.documentElement.textContent;
    }

    $(document).ready(function () {
        let recipes;
        let ingredients = new Set();
        let ingredientUseState = JSON.parse(localStorage.getItem(ingredientUseStorageKey)) || {};
        let ingredientAvailableState = JSON.parse(localStorage.getItem(ingredientAvailableStorageKey)) || {};


        function loadRecipes() {
            fetch(jsonUrl)
                .then(response => response.json())
                .then(data => {
                    recipes = data;

                    // Fix HTML escaping
                    recipes.forEach(recipe => {
                        for (const category in recipe.categories) {
                            recipe.categories[category].forEach(item => {
                                recipe.categories[category][recipe.categories[category].indexOf(item)] = htmlDecode(item);
                            });
                        }
                        recipe.name = htmlDecode(recipe.name);

                        // Collect ingredients
                        if (recipe.categories && recipe.categories["Zutat"]) {
                            recipe.categories["Zutat"].forEach(zutat => ingredients.add(zutat));
                        }
                    });

                    // Populate ingredient table
                    populateIngredientTable();
                })
                .catch(error => console.error("Error loading recipes:", error));
        }

        function populateIngredientTable() {
            const ingredientTableBody = $("#ingredientTableBody");
            ingredientTableBody.empty();

            const sortedIngredients = Array.from(ingredients).sort();

            sortedIngredients.forEach(ingredient => {
                const useId = `use-${ingredient.replace(/\s+/g, '_')}`;
                const availableId = `available-${ingredient.replace(/\s+/g, '_')}`;

                const useChecked = ingredientUseState[ingredient] === true ? "checked" : "";
                const availableChecked = ingredientAvailableState[ingredient] === true ? "checked" : "";

                const row = `
                    <tr>
                        <td>${ingredient}</td>
                        <td><input type="checkbox" id="${useId}" data-ingredient="${ingredient}" ${useChecked}></td>
                        <td><input type="checkbox" id="${availableId}" data-ingredient="${ingredient}" ${availableChecked}></td>
                    </tr>
                `;
                ingredientTableBody.append(row);
            });


            // Add event listeners for checkbox changes
            $("#ingredientTableBody input[type='checkbox']").change(function () {
                const ingredient = $(this).data("ingredient");
                const isUse = this.id.startsWith("use-");
                const isChecked = $(this).prop("checked");

                if (isUse) {
                    ingredientUseState[ingredient] = isChecked;
                    localStorage.setItem(ingredientUseStorageKey, JSON.stringify(ingredientUseState));
                } else {
                    ingredientAvailableState[ingredient] = isChecked;
                    localStorage.setItem(ingredientAvailableStorageKey, JSON.stringify(ingredientAvailableState));
                }
            });
        }

        function searchRecipes() {
            const kitchenIngredients = Object.keys(ingredientAvailableState).filter(ingredient => ingredientAvailableState[ingredient]);
            const useIngredients = Object.keys(ingredientUseState).filter(ingredient => ingredientUseState[ingredient]);

            const recipeData = recipes.map(recipe => {
                let matchCount = 0;
                let missingCount = 0;
                let matchUseCount = 0;
                let matchingIngredients = [];
                let missingIngredients = [];
                let useMatchingIngredients = [];

                if (recipe.categories && recipe.categories["Zutat"]) {
                    recipe.categories["Zutat"].forEach(ingredient => {
                        if (kitchenIngredients.includes(ingredient)) {
                            matchCount++;
                            matchingIngredients.push(ingredient);
                        } else {
                            missingCount++;
                            missingIngredients.push(ingredient);
                        }

                         if (useIngredients.includes(ingredient)) {
                            matchUseCount++;
                            useMatchingIngredients.push(ingredient);
                        }
                    });
                }

                return {
                    recipeName: `<div class="img-container"><img src="${recipeBaseUrl}${recipe.imageFilename}" alt="${recipe.name}"></div> <a href="${recipeBaseUrl}${recipe.filename}" target="_blank">${recipe.name}</a>`,
                    matchUseCount: matchUseCount,
                    matchCount: matchCount,
                    missingCount: missingCount,
                    ingredients: `Use Ingredients: ${useMatchingIngredients.join(", ") || "None"}<br>Kitchen: ${matchingIngredients.join(", ") || "None"}<br>Missing: ${missingIngredients.join(", ") || "None"}`,
                };
            });

            $("#recipeTable").bootstrapTable('destroy').bootstrapTable({
                data: recipeData,
                pagination: true,
                pageSize: 100,
                sortable: true,
                multipleSort: true
            });
        }

        $("#searchButton").click(searchRecipes);

        loadRecipes();
    });
</script>

</body>
</html>